{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AliceOS AliceOS is a robust and evolving framework for developing interactive visual novel experiences with operating system-like features such as notifications and setup assistants. Features and Principles The core principles of AliceOS are: Modular : AliceOS uses a new framework format, under the .aosframework format. These frameworks are placed in the System/Frameworks folder and are not heavily reliant on AppKit.aosframework. However, the definitions file that states the default directories and what-not must be included in the System folder (including fonts). Apple-style APIs : AliceOS's APIs aim to be easy-to-use and familiar to developers that have worked with APIs for macOS, iOS, tvOS, and watchOS. Safely extensible : AliceOS includes support for extending itself with apps that are protected using appropriate, official APIs. Easy-to-install : AliceOS installation is as easy as just copying the Ren'Py archive over to the game folder.","title":"Welcome to AliceOS"},{"location":"#welcome-to-aliceos","text":"AliceOS is a robust and evolving framework for developing interactive visual novel experiences with operating system-like features such as notifications and setup assistants.","title":"Welcome to AliceOS"},{"location":"#features-and-principles","text":"The core principles of AliceOS are: Modular : AliceOS uses a new framework format, under the .aosframework format. These frameworks are placed in the System/Frameworks folder and are not heavily reliant on AppKit.aosframework. However, the definitions file that states the default directories and what-not must be included in the System folder (including fonts). Apple-style APIs : AliceOS's APIs aim to be easy-to-use and familiar to developers that have worked with APIs for macOS, iOS, tvOS, and watchOS. Safely extensible : AliceOS includes support for extending itself with apps that are protected using appropriate, official APIs. Easy-to-install : AliceOS installation is as easy as just copying the Ren'Py archive over to the game folder.","title":"Features and Principles"},{"location":"01-install/","text":"Getting Started This document will help you get started with installing AliceOS and attaching it to your Ren'Py project. Downloading the base system If you do not plan to customize AliceOS too much, you can add the base system archive and use AliceOS that way. Download the latest release from the Downloads page and extract the ZIP archive. Then, copy AliceOSBaseSystem.rpa over to your Ren'Py project's game folder. About using AliceOS with DDLC If you plan to use AliceOS in a mod for Doki Doki Literature Club!, you must make sure that the base system version that you use is built against Ren'Py 6.99.12.4 to maintain compatibility. The release ZIP file is generally noted as 'AliceOS-x.x.x-_AliceOSBaseSystem-rp6.zip'. Building from source code Alternatively, you can build AliceOSBaseSystem.rpa yourself with the customization you need. Download the source code for the particular release you'd like and open Ren'Py Launcher. Select the AliceOS source code and click \"Build Distributions\". Uncheck the distribution options and check \"Alice OS Base System Distributable\". Click \"Build\". Your resulting ZIP file will be located in AliceOS-x.x.x-dists , and you can follow the instructions from Downloading the base system to finalize installation. About building AliceOS for DDLC use If you plan to build AliceOS for a Doki Doki Literature Club! mod, you must make sure that you use Ren'Py SDK v 6.99.12.4 to maintain compatibility.","title":"Getting Started"},{"location":"01-install/#getting-started","text":"This document will help you get started with installing AliceOS and attaching it to your Ren'Py project.","title":"Getting Started"},{"location":"01-install/#downloading-the-base-system","text":"If you do not plan to customize AliceOS too much, you can add the base system archive and use AliceOS that way. Download the latest release from the Downloads page and extract the ZIP archive. Then, copy AliceOSBaseSystem.rpa over to your Ren'Py project's game folder. About using AliceOS with DDLC If you plan to use AliceOS in a mod for Doki Doki Literature Club!, you must make sure that the base system version that you use is built against Ren'Py 6.99.12.4 to maintain compatibility. The release ZIP file is generally noted as 'AliceOS-x.x.x-_AliceOSBaseSystem-rp6.zip'.","title":"Downloading the base system"},{"location":"01-install/#building-from-source-code","text":"Alternatively, you can build AliceOSBaseSystem.rpa yourself with the customization you need. Download the source code for the particular release you'd like and open Ren'Py Launcher. Select the AliceOS source code and click \"Build Distributions\". Uncheck the distribution options and check \"Alice OS Base System Distributable\". Click \"Build\". Your resulting ZIP file will be located in AliceOS-x.x.x-dists , and you can follow the instructions from Downloading the base system to finalize installation. About building AliceOS for DDLC use If you plan to build AliceOS for a Doki Doki Literature Club! mod, you must make sure that you use Ren'Py SDK v 6.99.12.4 to maintain compatibility.","title":"Building from source code"},{"location":"02-changelog/","text":"What's New This document includes the release notes for all versions of AliceOS, either developer betas or stable releases. Classic 1.0.0 (Technical Preview 2) Setup assistant has been completely rewritten from the ground-up. Now supports dynamic font changes and a large font mode. Stop errors have been rewritten and are now dynamically called using ThrowASError() Default backgrounds have changed. OEM settings have been adjusted to use the new Setup assistant and now use hardcoded values for font files instead of dynamic assignments. Issue where Ren'Py projects crash upon loading an AliceOS dialog from a save file in OEM font mode has been resolved (#22). Classic 1.0.0 (Technical Preview 1) This is the first initial release of AliceOS Technical Preview.","title":"What's New"},{"location":"02-changelog/#whats-new","text":"This document includes the release notes for all versions of AliceOS, either developer betas or stable releases.","title":"What's New"},{"location":"02-changelog/#classic-100-technical-preview-2","text":"Setup assistant has been completely rewritten from the ground-up. Now supports dynamic font changes and a large font mode. Stop errors have been rewritten and are now dynamically called using ThrowASError() Default backgrounds have changed. OEM settings have been adjusted to use the new Setup assistant and now use hardcoded values for font files instead of dynamic assignments. Issue where Ren'Py projects crash upon loading an AliceOS dialog from a save file in OEM font mode has been resolved (#22).","title":"Classic 1.0.0 (Technical Preview 2)"},{"location":"02-changelog/#classic-100-technical-preview-1","text":"This is the first initial release of AliceOS Technical Preview.","title":"Classic 1.0.0 (Technical Preview 1)"},{"location":"AppKit/","text":"AppKit Overview AppKit is the official API set for writing custom apps for the AliceOS framework. Apps are a fun and extensible means of further enhancing the AliceOS environment without needing to customize the base installation and recompile from source. Apps also take advantage of AliceOS's features and frameworks, such as NotificationKit. About this documentation section The following documentation will cover the important facets of creating an AliceOS app and what frameworks are available. It will also cover important guidelines that all AliceOS apps should follow to maintain security, privacy, and consistency. Warning AliceOS's AppKit should not be confused with Apple's AppKit for macOS, the interface kit responsible for creating macOS applications.","title":"AppKit Overview"},{"location":"AppKit/#appkit-overview","text":"AppKit is the official API set for writing custom apps for the AliceOS framework. Apps are a fun and extensible means of further enhancing the AliceOS environment without needing to customize the base installation and recompile from source. Apps also take advantage of AliceOS's features and frameworks, such as NotificationKit.","title":"AppKit Overview"},{"location":"AppKit/#about-this-documentation-section","text":"The following documentation will cover the important facets of creating an AliceOS app and what frameworks are available. It will also cover important guidelines that all AliceOS apps should follow to maintain security, privacy, and consistency. Warning AliceOS's AppKit should not be confused with Apple's AppKit for macOS, the interface kit responsible for creating macOS applications.","title":"About this documentation section"},{"location":"AppKit/01-manifest/","text":"Declaring Your App Any app for AliceOS has its own manifest and declarations for what the app does. Luckily, defining an app is as easy as writing it directly into the class that all AliceOS apps inherit from. Typical app structure Apps are usually located in Applications , inside of the game folder, and have the file extension .aosapp . Inside of the file, a Ren'Py script help determine details about the app, and a Resources folder is included to add assets such as icons, images, and definitions. For instance, if we are creating an app call Foobanizer , the structure would look like this: game / Applications / Foobanizer . aosapp / Foobanizer . rpy Resources / Iconset / 16 . png 24 . png 32 . png 48 . png 64 . png 128 . png 256 . png Note that the icons are located in Resources/Iconset/ and have sizes for 16px, 24px, 32px, 48px, 64px, 128px, and 256px. These icons are important as they will appear in notifications, the desktop, and other places that require an icon. Writing your app's manifest AliceOS apps' manifests are included directly inside of their main app delegate, a subclass of ASAppRepresentative() . There are several important key field that should be directly written: bundleName : The name of the application. bundleId : The ID of the application in reverse domain name notation . bundleDir : The location of the application. By default, apps use AS_APPS_DIR + \" applicationname .aosapp/\" . bundleAuthor : The author or organization that developed the application. bundleVersion : The version of the application. bundleDescription : The description of the application. Agan, if we wanted to write Foobanizer's manifest, it'd look like this: init 10 python : class Foobanizer ( ASAppRepresentative ): bundleName = Foobanizer bundleId = app.aliceos.foobanizer bundleDir = AS_APPS_DIR + Foobanizer.aosapp/ bundleAuthor = AliceOS Developers bundleVersion = 1.0.0 bundleDescription = \\ Generate random foobanized strings on the fly. ... Declaring permissions Apps that need to make use of notifications via NotificationKit, modify files, watch system events, etc., must declare their permissions. This is done inside of the class via the requires dictionary: requires = { } The main permissions are: AS_REQUIRES_NOTIFICATIONKIT : Requires NotificationKit to send notifications AS_REQUIRES_FULL_DISK_ACCESS : Requires accessing files AS_REQUIRES_SYSTEM_EVENTS : Requires changing settings or watching for events More information on permissions can be found accordingly: Declaring notification permissions Rebuilding icons Icons for AliceOS apps typically reside in the app's Resources folder, though ASAppRepresentative may not pick it up at first. To ensure your app's icon locations are updated, make sure you initialize the class, where applicationname is the name of your app: def __init__ ( self ): ASAppRepresentative . __init__ ( self , AS_DEFAULT_APP_DIR + applicationname .aosapp/ ) Again, if we wanted to rebuild Foobanizer's icons: def __init__ ( self ): ASAppRepresentative . __init__ ( self , AS_APPS_DIR + Foobanizer.aosapp/ ) Example manifest Here's what the manifest file for Foobanizer would look like: # ASAppRepresentative is a Python class. # Everything must be wrapped in a Python block. init 10 python : class Foobanizer ( ASAppRepresentative ): bundleName = Foobanizer bundleId = app.aliceos.foobanizer bundleDir = AS_APPS_DIR + Foobanizer.aosapp/ bundleAuthor = AliceOS Developers bundleVersion = 1.0.0 bundleDescription = \\ Generate random foobanized strings on the fly. # Foobanizer doesn t require any permissions. requires = { } def __init__ ( self ): ASAppRepresentative . __init__ ( self , AS_APPS_DIR + Foobanizer.aosapp/ ) # Finally, we create an instance to pre-load. foobanizer = Foobanizer ()","title":"Declaring Your App"},{"location":"AppKit/01-manifest/#declaring-your-app","text":"Any app for AliceOS has its own manifest and declarations for what the app does. Luckily, defining an app is as easy as writing it directly into the class that all AliceOS apps inherit from.","title":"Declaring Your App"},{"location":"AppKit/01-manifest/#typical-app-structure","text":"Apps are usually located in Applications , inside of the game folder, and have the file extension .aosapp . Inside of the file, a Ren'Py script help determine details about the app, and a Resources folder is included to add assets such as icons, images, and definitions. For instance, if we are creating an app call Foobanizer , the structure would look like this: game / Applications / Foobanizer . aosapp / Foobanizer . rpy Resources / Iconset / 16 . png 24 . png 32 . png 48 . png 64 . png 128 . png 256 . png Note that the icons are located in Resources/Iconset/ and have sizes for 16px, 24px, 32px, 48px, 64px, 128px, and 256px. These icons are important as they will appear in notifications, the desktop, and other places that require an icon.","title":"Typical app structure"},{"location":"AppKit/01-manifest/#writing-your-apps-manifest","text":"AliceOS apps' manifests are included directly inside of their main app delegate, a subclass of ASAppRepresentative() . There are several important key field that should be directly written: bundleName : The name of the application. bundleId : The ID of the application in reverse domain name notation . bundleDir : The location of the application. By default, apps use AS_APPS_DIR + \" applicationname .aosapp/\" . bundleAuthor : The author or organization that developed the application. bundleVersion : The version of the application. bundleDescription : The description of the application. Agan, if we wanted to write Foobanizer's manifest, it'd look like this: init 10 python : class Foobanizer ( ASAppRepresentative ): bundleName = Foobanizer bundleId = app.aliceos.foobanizer bundleDir = AS_APPS_DIR + Foobanizer.aosapp/ bundleAuthor = AliceOS Developers bundleVersion = 1.0.0 bundleDescription = \\ Generate random foobanized strings on the fly. ...","title":"Writing your app's manifest"},{"location":"AppKit/01-manifest/#declaring-permissions","text":"Apps that need to make use of notifications via NotificationKit, modify files, watch system events, etc., must declare their permissions. This is done inside of the class via the requires dictionary: requires = { } The main permissions are: AS_REQUIRES_NOTIFICATIONKIT : Requires NotificationKit to send notifications AS_REQUIRES_FULL_DISK_ACCESS : Requires accessing files AS_REQUIRES_SYSTEM_EVENTS : Requires changing settings or watching for events More information on permissions can be found accordingly: Declaring notification permissions","title":"Declaring permissions"},{"location":"AppKit/01-manifest/#rebuilding-icons","text":"Icons for AliceOS apps typically reside in the app's Resources folder, though ASAppRepresentative may not pick it up at first. To ensure your app's icon locations are updated, make sure you initialize the class, where applicationname is the name of your app: def __init__ ( self ): ASAppRepresentative . __init__ ( self , AS_DEFAULT_APP_DIR + applicationname .aosapp/ ) Again, if we wanted to rebuild Foobanizer's icons: def __init__ ( self ): ASAppRepresentative . __init__ ( self , AS_APPS_DIR + Foobanizer.aosapp/ )","title":"Rebuilding icons"},{"location":"AppKit/01-manifest/#example-manifest","text":"Here's what the manifest file for Foobanizer would look like: # ASAppRepresentative is a Python class. # Everything must be wrapped in a Python block. init 10 python : class Foobanizer ( ASAppRepresentative ): bundleName = Foobanizer bundleId = app.aliceos.foobanizer bundleDir = AS_APPS_DIR + Foobanizer.aosapp/ bundleAuthor = AliceOS Developers bundleVersion = 1.0.0 bundleDescription = \\ Generate random foobanized strings on the fly. # Foobanizer doesn t require any permissions. requires = { } def __init__ ( self ): ASAppRepresentative . __init__ ( self , AS_APPS_DIR + Foobanizer.aosapp/ ) # Finally, we create an instance to pre-load. foobanizer = Foobanizer ()","title":"Example manifest"},{"location":"AppKit/02-sending-notifications/","text":"Sending Notifications Notifications are a great way to extend your visual novel project. If done correctly, they often can add an interactive experience that immerses players into the environment. Apps using AppKit have a way to send notification requests to the user that also respect's users' preferences. Declaring notification permissions Your app should have the proper permissions to send notifications via NotificationKit in the app's manifest. To ensure that your app lists itself as needing this permission, be sure to add AS_REQUIRES_NOTIFICATIONKIT into the requires field: requires = { AS_REQUIRES_NOTIFICATIONKIT , ... } Requesting for permission Typically, apps request for notification access before sending notification requests. There are two methods for handling this behavior: requestAllPermissions() will request for all permissions available. Use this only if notifications are dependent on other permissions that must be addressed immediately. requestPermission(forPermission=AS_REQUIRES_NOTIFICATIONKIT) will request specifically for the NotificationKit permission. Sending a temporary notification request Apps using AppKit have an official means of handling temporary notifications as banners via several methods. More details are provided on the Banners page . applicationShouldRequestNotification() This function is provided to check that the app has been given permission to send notifications. Returns Whether the app has been given permission to send notifications as a Boolean value. Danger Do not override this function unless you need to perform an additional check. applicationWillRequestNotification() Parameters message : The message or title of the notification. withDetails : The details of the notification. responseCallback (Optional) The action to perform when clicking 'Respond'. Tip If there are preliminary actions that should be performed before requesting a notification, you may redefine the function, granted that you also include ASAppRepresentative.applicationWillRequestNotification() . Example def applicationWillRequestNotification ( self , message , withDetails , responseCallback ) : if not Error in message : ASAppRepresentative . applicationWillRequestNotification ( message , withDetails , responseCallback ) else : print (Err: + message + ) + withDetails Danger Do not use any other methods for sending temporary notifications that do not listen to applicationShouldRequestNotification() . All notifications should adhere to users' preference. applicationDidRequestNotification() applicationDidRequestNotification() runs after a notification has been sent. This can be used to watch for a particular action or to do something else.","title":"Sending Notifications"},{"location":"AppKit/02-sending-notifications/#sending-notifications","text":"Notifications are a great way to extend your visual novel project. If done correctly, they often can add an interactive experience that immerses players into the environment. Apps using AppKit have a way to send notification requests to the user that also respect's users' preferences.","title":"Sending Notifications"},{"location":"AppKit/02-sending-notifications/#declaring-notification-permissions","text":"Your app should have the proper permissions to send notifications via NotificationKit in the app's manifest. To ensure that your app lists itself as needing this permission, be sure to add AS_REQUIRES_NOTIFICATIONKIT into the requires field: requires = { AS_REQUIRES_NOTIFICATIONKIT , ... }","title":"Declaring notification permissions"},{"location":"AppKit/02-sending-notifications/#requesting-for-permission","text":"Typically, apps request for notification access before sending notification requests. There are two methods for handling this behavior: requestAllPermissions() will request for all permissions available. Use this only if notifications are dependent on other permissions that must be addressed immediately. requestPermission(forPermission=AS_REQUIRES_NOTIFICATIONKIT) will request specifically for the NotificationKit permission.","title":"Requesting for permission"},{"location":"AppKit/02-sending-notifications/#sending-a-temporary-notification-request","text":"Apps using AppKit have an official means of handling temporary notifications as banners via several methods. More details are provided on the Banners page .","title":"Sending a temporary notification request"},{"location":"AppKit/02-sending-notifications/#applicationshouldrequestnotification","text":"This function is provided to check that the app has been given permission to send notifications. Returns Whether the app has been given permission to send notifications as a Boolean value. Danger Do not override this function unless you need to perform an additional check.","title":"applicationShouldRequestNotification()"},{"location":"AppKit/02-sending-notifications/#applicationwillrequestnotification","text":"Parameters message : The message or title of the notification. withDetails : The details of the notification. responseCallback (Optional) The action to perform when clicking 'Respond'. Tip If there are preliminary actions that should be performed before requesting a notification, you may redefine the function, granted that you also include ASAppRepresentative.applicationWillRequestNotification() . Example def applicationWillRequestNotification ( self , message , withDetails , responseCallback ) : if not Error in message : ASAppRepresentative . applicationWillRequestNotification ( message , withDetails , responseCallback ) else : print (Err: + message + ) + withDetails Danger Do not use any other methods for sending temporary notifications that do not listen to applicationShouldRequestNotification() . All notifications should adhere to users' preference.","title":"applicationWillRequestNotification()"},{"location":"AppKit/02-sending-notifications/#applicationdidrequestnotification","text":"applicationDidRequestNotification() runs after a notification has been sent. This can be used to watch for a particular action or to do something else.","title":"applicationDidRequestNotification()"},{"location":"AppKit/10-ASAppRepresentative/","text":"ASAppRepresentative() ASAppRepresentative is the Python class responsible for defining apps in AliceOS. The following documentation covers all of the methods and properties of this class. Properties bundleName : The name of the application. bundleId : The ID of the application in reverse domain name notation . bundleDir : The location of the application. By default, apps use AS_APPS_DIR + \" applicationname .aosapp/\" . bundleAuthor : The author or organization that developed the application. bundleVersion : The version of the application. bundleDescription : The description of the application. requires : A dictionary containing all of the permissions needed for the app to function. icons : A dictionary containing the paths of all icons for the appropriate sizes. Methods __init__(appDirectory) Constructs an instance of ASAppRepresentative . Parameters appDirectory : The directory of which the app is located. Equivalent to bundleDir . requestPermission(forPermission) Requests a particular permission located in requires . Parameters forPermission : The permission to request. Must be in requires to execute. requestAllPermissions() Requests all permissions located in requires , one by one. applicationWillLaunch() Executes any preliminary actions before the app launches. applicationDidLaunch() Executes post-launch actions after the app has launched. applicationWillTerminate() Executes cleanup actions before the app closes. applicationDidTerminate() Executes any tasks before finally closing. applicationShouldRequestNotification() Return whether the app is authorized to send notifications. Returns Boolean value dictating whether the app includes the notification permission and has permission to send notifications from the user. applicationWillRequestNotification(message, withDetails, responseCallback) Executes any pre-processing for a notification request and then sends a request. Parameters message : The message or title of the notification. withDetails : The details of the notification. responseCallback (Optional) The action to perform when clicking 'Respond'. applicationDidRequestNotification() Executes any actions after sending a notification request.","title":"ASAppRepresentative()"},{"location":"AppKit/10-ASAppRepresentative/#asapprepresentative","text":"ASAppRepresentative is the Python class responsible for defining apps in AliceOS. The following documentation covers all of the methods and properties of this class.","title":"ASAppRepresentative()"},{"location":"AppKit/10-ASAppRepresentative/#properties","text":"bundleName : The name of the application. bundleId : The ID of the application in reverse domain name notation . bundleDir : The location of the application. By default, apps use AS_APPS_DIR + \" applicationname .aosapp/\" . bundleAuthor : The author or organization that developed the application. bundleVersion : The version of the application. bundleDescription : The description of the application. requires : A dictionary containing all of the permissions needed for the app to function. icons : A dictionary containing the paths of all icons for the appropriate sizes.","title":"Properties"},{"location":"AppKit/10-ASAppRepresentative/#methods","text":"","title":"Methods"},{"location":"AppKit/10-ASAppRepresentative/#__init__appdirectory","text":"Constructs an instance of ASAppRepresentative . Parameters appDirectory : The directory of which the app is located. Equivalent to bundleDir .","title":"__init__(appDirectory)"},{"location":"AppKit/10-ASAppRepresentative/#requestpermissionforpermission","text":"Requests a particular permission located in requires . Parameters forPermission : The permission to request. Must be in requires to execute.","title":"requestPermission(forPermission)"},{"location":"AppKit/10-ASAppRepresentative/#requestallpermissions","text":"Requests all permissions located in requires , one by one.","title":"requestAllPermissions()"},{"location":"AppKit/10-ASAppRepresentative/#applicationwilllaunch","text":"Executes any preliminary actions before the app launches.","title":"applicationWillLaunch()"},{"location":"AppKit/10-ASAppRepresentative/#applicationdidlaunch","text":"Executes post-launch actions after the app has launched.","title":"applicationDidLaunch()"},{"location":"AppKit/10-ASAppRepresentative/#applicationwillterminate","text":"Executes cleanup actions before the app closes.","title":"applicationWillTerminate()"},{"location":"AppKit/10-ASAppRepresentative/#applicationdidterminate","text":"Executes any tasks before finally closing.","title":"applicationDidTerminate()"},{"location":"AppKit/10-ASAppRepresentative/#applicationshouldrequestnotification","text":"Return whether the app is authorized to send notifications. Returns Boolean value dictating whether the app includes the notification permission and has permission to send notifications from the user.","title":"applicationShouldRequestNotification()"},{"location":"AppKit/10-ASAppRepresentative/#applicationwillrequestnotificationmessage-withdetails-responsecallback","text":"Executes any pre-processing for a notification request and then sends a request. Parameters message : The message or title of the notification. withDetails : The details of the notification. responseCallback (Optional) The action to perform when clicking 'Respond'.","title":"applicationWillRequestNotification(message, withDetails, responseCallback)"},{"location":"AppKit/10-ASAppRepresentative/#applicationdidrequestnotification","text":"Executes any actions after sending a notification request.","title":"applicationDidRequestNotification()"},{"location":"NotificationKit/","text":"NotificationKit Overview NotificationKit is the official API set for sending notifications in AliceOS. Notifications include the following: Banners : Temporary popups from the top of the screen that can be acted upon or dismissed. Alerts: Full-screen dialog boxes that require user input immediately. Sounds: Sounds that play to incidate something has occured. About this documentation section The documentation provided on NotificationKit does not cover usage of their implementation with apps. Rather, the documentation covers the screens in use and how they can be called without needing Applets. This kind of scenario applies in cases where the AliceOS base only includes NotificationKit. If you wish to create an app that makes use of NotificationKit, please consult the Apps documentation under \"Sending Notifications\".","title":"NotificationKit Overview"},{"location":"NotificationKit/#notificationkit-overview","text":"NotificationKit is the official API set for sending notifications in AliceOS. Notifications include the following: Banners : Temporary popups from the top of the screen that can be acted upon or dismissed. Alerts: Full-screen dialog boxes that require user input immediately. Sounds: Sounds that play to incidate something has occured.","title":"NotificationKit Overview"},{"location":"NotificationKit/#about-this-documentation-section","text":"The documentation provided on NotificationKit does not cover usage of their implementation with apps. Rather, the documentation covers the screens in use and how they can be called without needing Applets. This kind of scenario applies in cases where the AliceOS base only includes NotificationKit. If you wish to create an app that makes use of NotificationKit, please consult the Apps documentation under \"Sending Notifications\".","title":"About this documentation section"},{"location":"NotificationKit/01-banner/","text":"Banners Banners provide a temporary pop-up at the top of the screen that automatically dismiss after five seconds. Banners usually include an app's name, primary message, details, and a response callback upon clicking 'Respond'. ASNotificationBanner() ASNotificationBanner(applet=None, message, withDetails, responseCallback=Return('didClickRespond')) Parameters applet : (Optional) The app object to pass in. If None, the app icon and bundle name on the top will display as \"Unknown Bundle\". message : (Required) The main message or sender. withDetails : (Required) The details of the message. responseCallback (Optional) The action to run upon clicking \"Respond\". Returns If the notification times out and dismisses, the banner will return 'notificationTimedOut' . If the notification's response callback is left as the default, the banner will return 'didClickRespond' when clicking the \"Respond\" button. Guidelines Banners are intended for temporary actions that can be ignored, if possible. Keep these guidelines in mind when using banners: Refrain from overloading banners . This can be visually distracting and may annoy the user. Keep the message and details short . Banners are intended for a quick glance or something that doesn't require a lot of attention. Don't force the user to interact with the banner . Banners shouldn't require the user to perform an action.","title":"Banners"},{"location":"NotificationKit/01-banner/#banners","text":"Banners provide a temporary pop-up at the top of the screen that automatically dismiss after five seconds. Banners usually include an app's name, primary message, details, and a response callback upon clicking 'Respond'.","title":"Banners"},{"location":"NotificationKit/01-banner/#asnotificationbanner","text":"ASNotificationBanner(applet=None, message, withDetails, responseCallback=Return('didClickRespond'))","title":"ASNotificationBanner()"},{"location":"NotificationKit/01-banner/#parameters","text":"applet : (Optional) The app object to pass in. If None, the app icon and bundle name on the top will display as \"Unknown Bundle\". message : (Required) The main message or sender. withDetails : (Required) The details of the message. responseCallback (Optional) The action to run upon clicking \"Respond\".","title":"Parameters"},{"location":"NotificationKit/01-banner/#returns","text":"If the notification times out and dismisses, the banner will return 'notificationTimedOut' . If the notification's response callback is left as the default, the banner will return 'didClickRespond' when clicking the \"Respond\" button.","title":"Returns"},{"location":"NotificationKit/01-banner/#guidelines","text":"Banners are intended for temporary actions that can be ignored, if possible. Keep these guidelines in mind when using banners: Refrain from overloading banners . This can be visually distracting and may annoy the user. Keep the message and details short . Banners are intended for a quick glance or something that doesn't require a lot of attention. Don't force the user to interact with the banner . Banners shouldn't require the user to perform an action.","title":"Guidelines"},{"location":"System/01-definitions/","text":"AliceOS Definitions To make referencing common AliceOS build settings and structures easier, AliceOS provides the following definitions and dictionaries. These are located in System/ASDefinitions.rpy and can be modified if necessary. Directory definitions Definition name Points to Used for AS_SYSTEM_DIR System/ The default System directory. AS_FRAMEWORKS_DIR System/Frameworks/ The default Frameworks directory. AS_CORESERVICES_DIR System/CoreServices/ The default Core Services directory. AS_DEFAULT_APP_DIR System/Applications/ The default System applications directory. This isn't necessary for developer use. AS_FONTS_DIR System/Fonts/ The default Fonts directory. AS_APPS_DIR Applications/ The default Applications directory. AS_LIBRARY_DIR System/Library/ The default Library directory. Framework directory definitions AS_FRAMEWORK_DIR(FRAMEWORK_NAME=\"Default\") The directory where a particular Framework is located. Makes use of AS_FRAMEWORKS_DIR . Parameters FRAMEWORK_NAME : The name of the framework to reference. Example: NotificationKit Returns The path to the framework. Example: System/Frameworks/NotificationKit.aosframework/ Permissions definitions These definitions are used to specify important strings when asking the user permission for a particular item. These are dictionaries that include the values for a particular permission. AS_REQUIRE_PERMS_NAME : The dictionary containing the name of the permission name. Example: \"Send Notifications\" AS_REQUIRE_PERMS_DESC : The dictionary containing the description of a permission. Example: \"Notifications may include banners, alerts, and sounds. These can be configured in Settings.\"","title":"AliceOS Definitions"},{"location":"System/01-definitions/#aliceos-definitions","text":"To make referencing common AliceOS build settings and structures easier, AliceOS provides the following definitions and dictionaries. These are located in System/ASDefinitions.rpy and can be modified if necessary.","title":"AliceOS Definitions"},{"location":"System/01-definitions/#directory-definitions","text":"Definition name Points to Used for AS_SYSTEM_DIR System/ The default System directory. AS_FRAMEWORKS_DIR System/Frameworks/ The default Frameworks directory. AS_CORESERVICES_DIR System/CoreServices/ The default Core Services directory. AS_DEFAULT_APP_DIR System/Applications/ The default System applications directory. This isn't necessary for developer use. AS_FONTS_DIR System/Fonts/ The default Fonts directory. AS_APPS_DIR Applications/ The default Applications directory. AS_LIBRARY_DIR System/Library/ The default Library directory.","title":"Directory definitions"},{"location":"System/01-definitions/#framework-directory-definitions","text":"AS_FRAMEWORK_DIR(FRAMEWORK_NAME=\"Default\") The directory where a particular Framework is located. Makes use of AS_FRAMEWORKS_DIR . Parameters FRAMEWORK_NAME : The name of the framework to reference. Example: NotificationKit Returns The path to the framework. Example: System/Frameworks/NotificationKit.aosframework/","title":"Framework directory definitions"},{"location":"System/01-definitions/#permissions-definitions","text":"These definitions are used to specify important strings when asking the user permission for a particular item. These are dictionaries that include the values for a particular permission. AS_REQUIRE_PERMS_NAME : The dictionary containing the name of the permission name. Example: \"Send Notifications\" AS_REQUIRE_PERMS_DESC : The dictionary containing the description of a permission. Example: \"Notifications may include banners, alerts, and sounds. These can be configured in Settings.\"","title":"Permissions definitions"},{"location":"System/02-default-apps/","text":"Default Apps AliceOS includes several default applications that are located in System/Applications/ . These applications are designed to enhance the AliceOS experience and provide functionalities for core parts without having to write a third-party app for them. Messages Messages is a simple app designed to simulate text messaging between characters and the player in a fun way. Available methods messages.receiveMessage(fromPerson, message) Send a notification request that displays a text message from a person. Parameters fromPerson : The person the message is being sent from message : The text message being sent Returns Returns the default values as indicated from ASNotificationBanner","title":"Default Apps"},{"location":"System/02-default-apps/#default-apps","text":"AliceOS includes several default applications that are located in System/Applications/ . These applications are designed to enhance the AliceOS experience and provide functionalities for core parts without having to write a third-party app for them.","title":"Default Apps"},{"location":"System/02-default-apps/#messages","text":"Messages is a simple app designed to simulate text messaging between characters and the player in a fun way. Available methods messages.receiveMessage(fromPerson, message) Send a notification request that displays a text message from a person. Parameters fromPerson : The person the message is being sent from message : The text message being sent Returns Returns the default values as indicated from ASNotificationBanner","title":"Messages"},{"location":"System/03-core-services/","text":"Core Services AliceOS comes with several bundled Core Services that you should be aware of. These Core Services are crucial to AliceOS's core and are included in every AliceOS installation. Core Services are given the .aoscservice file extension and exist under System/CoreServices . Core services also make use of ServiceKit, an in-house framework for defining core services. About ServiceKit At all costs, do not remove ServiceKit.aosframework or attempt to write your own applications using ServiceKit. ServiceKit is a service-only API set that should be used for system-level utilities, not for third-party applications. Use AppKit instead. Desktop The Desktop Core Service is responsible for displaying current applications installed on the system as well as providing a desktop shell if necessary. Error Halt System The Error Halt System (Halt) Core Service is responsible for displaying any critical errors that cause AliceOS to restart. It provides helpful information such as the error code and where to go for more information. More information on how this Core Service works can be found on the article about Critical Errors . Removing a service If you find that you don't need a particular core service, you can delete it from the CoreServices directory and rebuild AliceOS. Warning If you plan to remove a Core Service, do so with caution. Other parts of AliceOS may make system calls that heavily rely on them.","title":"Core Services"},{"location":"System/03-core-services/#core-services","text":"AliceOS comes with several bundled Core Services that you should be aware of. These Core Services are crucial to AliceOS's core and are included in every AliceOS installation. Core Services are given the .aoscservice file extension and exist under System/CoreServices . Core services also make use of ServiceKit, an in-house framework for defining core services. About ServiceKit At all costs, do not remove ServiceKit.aosframework or attempt to write your own applications using ServiceKit. ServiceKit is a service-only API set that should be used for system-level utilities, not for third-party applications. Use AppKit instead.","title":"Core Services"},{"location":"System/03-core-services/#desktop","text":"The Desktop Core Service is responsible for displaying current applications installed on the system as well as providing a desktop shell if necessary.","title":"Desktop"},{"location":"System/03-core-services/#error-halt-system","text":"The Error Halt System (Halt) Core Service is responsible for displaying any critical errors that cause AliceOS to restart. It provides helpful information such as the error code and where to go for more information. More information on how this Core Service works can be found on the article about Critical Errors .","title":"Error Halt System"},{"location":"System/03-core-services/#removing-a-service","text":"If you find that you don't need a particular core service, you can delete it from the CoreServices directory and rebuild AliceOS. Warning If you plan to remove a Core Service, do so with caution. Other parts of AliceOS may make system calls that heavily rely on them.","title":"Removing a service"},{"location":"System/04-critical-errors/","text":"Critical Errors If AliceOS encounters a critical error where it needs to restart to continue, the user will see the above warning and the system will restart automatically after 10 seconds. An error code is provided at the bottom and a QR cose is present to search the error on the Error Database . Critical errors and the halt screen is managed by the Error Halt System (Halt), a Core Service and can be used to present errors that aren't already caught by the base AliceOS distribution. Displaying a halt To display the halt screen with a respective error code, call $ ASHalt.halt(\"ERR_CODE\") . The system will display the halt and automatically restart after ten seconds. Guidelines Halt screens should be used to catch important, critical errors. Make your error code descriptive. The user should be able to get an idea of what the problem might be from the error code itself. For instance, \" MISSING_CYANIDE_INSTRUMENT \" is more descriptive than \" INSTRUMENT_FAIL \". Make sure your error is searchable in the database. The user should be able to search for your error in the Error Database to investigate what went wrong. Don't call the halt screen for a non-critical error. The halt screen is designed to present immediate and important information to the user about a potential error that could damage AliceOS or your game in some way. It shouldn't be used to present an app-wide or section-wide error as the screen is rather intrusive.","title":"Critical Errors"},{"location":"System/04-critical-errors/#critical-errors","text":"If AliceOS encounters a critical error where it needs to restart to continue, the user will see the above warning and the system will restart automatically after 10 seconds. An error code is provided at the bottom and a QR cose is present to search the error on the Error Database . Critical errors and the halt screen is managed by the Error Halt System (Halt), a Core Service and can be used to present errors that aren't already caught by the base AliceOS distribution.","title":"Critical Errors"},{"location":"System/04-critical-errors/#displaying-a-halt","text":"To display the halt screen with a respective error code, call $ ASHalt.halt(\"ERR_CODE\") . The system will display the halt and automatically restart after ten seconds.","title":"Displaying a halt"},{"location":"System/04-critical-errors/#guidelines","text":"Halt screens should be used to catch important, critical errors. Make your error code descriptive. The user should be able to get an idea of what the problem might be from the error code itself. For instance, \" MISSING_CYANIDE_INSTRUMENT \" is more descriptive than \" INSTRUMENT_FAIL \". Make sure your error is searchable in the database. The user should be able to search for your error in the Error Database to investigate what went wrong. Don't call the halt screen for a non-critical error. The halt screen is designed to present immediate and important information to the user about a potential error that could damage AliceOS or your game in some way. It shouldn't be used to present an app-wide or section-wide error as the screen is rather intrusive.","title":"Guidelines"}]}